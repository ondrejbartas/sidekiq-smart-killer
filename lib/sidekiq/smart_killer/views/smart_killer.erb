<script type="text/javascript" src="<%= root_path %>javascripts/dashboard.js"></script>
<div class="table_container">
  <table class="processes table table-hover table-bordered table-striped table-white">
    <thead>
      <th><%= t('Hostname') %></th>
      <th><%= t('Memory') %></th>
      <th><%= t('CPU') %></th>
    </thead>
    <% Sidekiq::SmartKiller::History.hostnames.each do |hostname| %>
      <tr>
        <td><a href="#hostname-<%= hostname.gsub('.', 'x') %>"><%= hostname %></a></td>
        <td><%= Sidekiq::SmartKiller::History.mem_history(hostname, 3).values.select { |c| c > 0 }.last.try(:round, 2) %>% </td>
        <td><%= Sidekiq::SmartKiller::History.cpu_history(hostname, 3).values.select { |c| c > 0 }.last.try(:round, 2) %>% </td>
      </tr>
    <% end %>
  </table>
</div>

<% Sidekiq::SmartKiller::History.hostnames.each do |hostname| %>
  <h3 id="hostname-<%= hostname.gsub(".", 'x') %>"><%= hostname %></h3>
  <div class="row chart">
    <div
      id="history"
      class="history-custom-<%= hostname.gsub(".", 'x') %>"
      data-processed-label="CPU"
      data-failed-label="MEM"
      data-processed="<%= h Sidekiq.dump_json(Sidekiq::SmartKiller::History.cpu_history(hostname)) %>"
      data-failed="<%= h Sidekiq.dump_json(Sidekiq::SmartKiller::History.mem_history(hostname)) %>"
    ></div>
    <div id="history-legend"></div>
  </div>

  <% hostname_processes = Sidekiq::SmartKiller::History.processes(hostname) %>
  <div class="table_container">
    <table class="processes table table-hover table-bordered table-striped table-white">
      <thead>
        <th><%= t('Name') %></th>
        <th><%= t('Started') %></th>
        <th><%= t('Memory') %></th>
        <th><%= t('CPU') %></th>
        <th><%= t('Busy') %></th>
        <th>&nbsp;</th>
      </thead>
      <% processes.each do |process| %>
        <% next unless process['hostname'] == hostname %>
        <tr>
          <td class="box">
            <%= "#{process['hostname']}:#{process['pid']}" %>
            <span class="label label-success"><%= process.tag %></span>
            <% process.labels.each do |label| %>
              <span class="label label-info"><%= label %></span>
            <% end %>
            <% if process.stopping? %>
              <span class="label label-danger">quiet</span>
            <% end %>
            <br>
            <b><%= "#{t('Queues')}: " %></b>
            <%= process['queues'] * ", " %>
          </td>
          <td><%= relative_time(Time.at(process['started_at'])) %></td>
          <% if hostname_processes[process.identity] %>
          <td><%= hostname_processes[process.identity]['memory_in_mb'].round(2) %>MB (<%= hostname_processes[process.identity]['memory_percent'].round(2) %>%)</td>
          <td><%= hostname_processes[process.identity]['cpu_percent'] %>%</td>
          <% else %>
            <td></td>
            <td></td>
          <% end%>
          <td><%= process['busy'] %></td>
          <td>
            <div class="btn-group pull-right flip">
              <form method="POST">
                <%= csrf_tag %>
                <input type="hidden" name="identity" value="<%= process['identity'] %>"/>
                <% unless process.stopping? %>
                  <button class="btn btn-warn" type="submit" name="quiet" value="1"><%= t('Quiet') %></button>
                <% end %>
                <button class="btn btn-danger" type="submit" name="stop" value="1"><%= t('Stop') %></button>
              </form>
            </div>
          </td>
        </tr>
      <% end %>
    </table>
  </div>
<% end %>

<script type="text/javascript">

var historyGraph = function(container) {
  var graphElement = container;
  processed = createSeries(JSON.parse(graphElement.dataset.processed))
  failed = createSeries(JSON.parse(graphElement.dataset.failed))

  var graph = new Rickshaw.Graph( {
    element: graphElement,
    width: responsiveWidth(),
    height: 200,
    max: 100,
    renderer: 'line',
    interpolation: 'linear',
    series: [
      {
        color: "#B1003E",
        data: failed,
        name: graphElement.dataset.failedLabel
      }, {
        color: "#006f68",
        data: processed,
        name: graphElement.dataset.processedLabel
      }
    ]
  } );

  var unit = {}
  unit.formatTime = function(d) {
    return d.toUTCString().match(/(\d+:\d+):/)[1];
  };
  unit.formatter = function(d) { return this.formatTime(d)};
  unit.name = "5 minute";
  unit.seconds = 3600;
  var x_axis = new Rickshaw.Graph.Axis.Time({
    graph: graph,
    timeUnit:unit,
    ticksTreatment: 'glow',
    timeFixture: new Rickshaw.Fixtures.Time.Local()
  });
  //var x_axis = new Rickshaw.Graph.Axis.Time( { graph: graph } );

  var y_axis = new Rickshaw.Graph.Axis.Y({
    graph: graph,
    tickFormat: Rickshaw.Fixtures.Number.formatKMBT,
    ticksTreatment: 'glow'
  });

  graph.render();

  var legend = graphElement.closest('.chart').querySelector('#history-legend');
  var Hover = Rickshaw.Class.create(Rickshaw.Graph.HoverDetail, {
    render: function(args) {

      legend.innerHTML = "";

      var timestamp = document.createElement('div');
      timestamp.className = 'timestamp';
      timestamp.innerHTML = args.formattedXValue;
      legend.appendChild(timestamp);

      args.detail.sort(function(a, b) { return a.order - b.order }).forEach( function(d) {
        var line = document.createElement('div');
        line.className = 'line';

        var swatch = document.createElement('div');
        swatch.className = 'swatch';
        swatch.style.backgroundColor = d.series.color;

        var label = document.createElement('div');
        label.className = 'tag';
        label.innerHTML = d.name + ": " + Math.floor(d.formattedYValue).numberWithDelimiter() + "%";

        line.appendChild(swatch);
        line.appendChild(label);

        legend.appendChild(line);

        var dot = document.createElement('div');
        dot.className = 'dot';
        dot.style.top = graph.y(d.value.y0 + d.value.y) + 'px';
        dot.style.borderColor = d.series.color;

        this.element.appendChild(dot);

        dot.className = 'dot active';

        this.show();

      }, this );
    }
  });
  var hover = new Hover( { graph: graph } );
}

<% Sidekiq::SmartKiller::History.hostnames.each do |hostname| %>
console.log(document.querySelector('.history-custom-<%= hostname.gsub(".", 'x') %>'))
  historyGraph(document.querySelector('.history-custom-<%= hostname.gsub(".", 'x') %>'))
<% end %>
</script>
